name: Provision & Register Runner

# 既可以手动触发，也可以 push 到 main 自动触发
on:
  workflow_dispatch:

jobs:
  provision:
    runs-on: ubuntu-latest
    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      SSH_PRIVATE_KEY_ID: ${{ secrets.SSH_PRIVATE_KEY_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 设置 SSH 私钥
        run: |
          printf '%b\n' "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: 检查 AliceInit 实例是否存在
        id: check-instance
        run: |
          resp=$(curl -s 'https://app.alice.ws/cli/v1/Evo/Instance' \
            -H "KP-APIToken: $API_TOKEN")
          if echo "$resp" | jq -e '.data | length > 0' > /dev/null; then
            echo "Instance already exists."
            echo "should_create=false" >> "$GITHUB_OUTPUT"
            ip=$(echo $resp | jq -r .data.[0].ipv4)
            id=$(echo $resp | jq -r .data.[0].id)
            echo "::add-mask::$ip"
            echo "::add-mask::$id"
            echo "ip=$ip" >> "$GITHUB_OUTPUT"
            echo "id=$id" >> "$GITHUB_ENV"
          else
            echo "No existing instance. Need to create."
            echo "should_create=true" >> "$GITHUB_OUTPUT"
          fi

      - name: 创建 AliceInit 实例
        id: provision
        if: ${{ steps.check-instance.outputs.should_create == 'true' }}
        run: |
          resp=$(curl -s -X POST 'https://app.alice.ws/cli/v1/Evo/Deploy' \
            -H "KP-APIToken: $API_TOKEN" \
            --form "product_id=39" \
            --form "os_id=10" \
            --form "time=4" \
            --form "sshKey=$SSH_PRIVATE_KEY_ID")
          data=$(echo "$resp" | jq -r .data)
          ip=$(echo "$data" | jq -r .ipv4)
          id=$(echo "$data" | jq -r .id)
          echo "::add-mask::$ip"
          echo "::add-mask::$id"
          echo "ip=$ip" >> "$GITHUB_OUTPUT"
          echo "id=$id" >> "$GITHUB_ENV"
          sleep 60s

      - name: 获取实例 IP
        id: get_ip
        run: |
          if [ -n "${{ steps.check-instance.outputs.ip }}" ]; then
            echo "ip=${{ steps.check-instance.outputs.ip }}" >> "$GITHUB_OUTPUT"
          else
            echo "ip=${{ steps.provision.outputs.ip }}" >> "$GITHUB_OUTPUT"
          fi

      - name: 等待实例 SSH 就绪
        id: register-runner
        run: |
          ip="${{ steps.get_ip.outputs.ip }}"

          # 等待 SSH 可用
          echo "Waiting for SSH on $ip..."
          
          for i in {1..10}; do
            if ssh -o BatchMode=yes \
                   -o ConnectTimeout=5 \
                   -o StrictHostKeyChecking=no \
                   -i private_key.pem \
                   root@"$ip" "echo ready" &> /dev/null; then
              echo "✅ SSH ready"
              break
            else
              echo "⏳ SSH not ready yet ($i/10)..."
              sleep 5
            fi
          done

#      - name: Reinstall the system
#        run: |
#              ip=${{ steps.get_ip.outputs.ip }}
#              ssh -o StrictHostKeyChecking=no -i private_key.pem root@$ip << 'EOF'
#               curl -O https://raw.githubusercontent.com/bin456789/reinstall/main/reinstall.sh || wget -O reinstall.sh $_
#               bash reinstall.sh ubuntu 22.04 --ssh-key /root/.ssh/authorized_keys
#               shutdown -r -t 5
#              EOF
#              echo "系统重装命令已发送，等待实例重启..."
#              sleep 5m
#
#              # 等待 SSH 可用
#              echo "Waiting for SSH on $ip..."
#
#              for i in {1..10}; do
#                if ssh -o BatchMode=yes \
#                       -o ConnectTimeout=5 \
#                       -o StrictHostKeyChecking=no \
#                       -i private_key.pem \
#                       root@"$ip" "echo ready" &> /dev/null; then
#                  echo "✅ SSH ready"
#                  break
#                else
#                  echo "⏳ SSH not ready yet ($i/10)..."
#                  sleep 5
#                fi
#              done
      - name: Build on Remote
        id: build
        run: |
          echo "开始在远程实例上安装并注册 Runner..."
          ip=${{ steps.get_ip.outputs.ip }}
          ssh -o StrictHostKeyChecking=no -i private_key.pem root@"$ip" << "EOF"
                      apt update && apt upgrade -y && apt install -y curl tar xz-utils git jq unzip snapd docker-compose
            if pgrep -f "Runner.Listener run" >/dev/null 2>&1; then
            echo "🛑 Runner 已在运行，跳过启动。"
            exit 0
            fi
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            # git clone https://github.com/actions/runner-images && cd runner-images/images/ubuntu/scripts/build
            # mv ../helpers/* /
            # mv ../../toolsets/toolset-2204.json /toolset.json
            # for file in *.sh; do chmod +x "$file";./"$file"||true;done
            # cd ../../../../../
            # 创建目录并下载 runner

            LATEST_URL=$(curl -s https://api.github.com/repos/actions/runner/releases/latest \
                         | jq -r .assets[] \
                         | grep 'actions-runner-linux-x64-' \
                         | head -n 2 \
                         | cut -d '"' -f 4)
            wget -q $LATEST_URL
            TAR_NAME=$(basename "$LATEST_URL")
            tar xzf "$TAR_NAME"
            rm "$TAR_NAME"
            REG_TOKEN=$(curl -s -X POST \
              -H "Accept: application/json" \
              -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
              https://api.github.com/repos/${{ vars.REPO }}/actions/runners/registration-token \
              | jq -r .token)
            # 配置 runner
            export RUNNER_ALLOW_RUNASROOT=1
            ./config.sh --url https://github.com/${{ vars.REPO }} \
                        --token $REG_TOKEN \
                        --unattended \
                        --labels self-hosted
        
            # 后台启动 runner
            nohup ./run.sh > /dev/null 2>&1 &
            echo "Runner 启动完毕，正在监听作业队列..."

            exit
          EOF

      - name: 通知后续：触发 “在 Self-hosted 上执行 Build” 工作流
        if: ${{ vars.WORKFLOW != '' }}
        run: |
          echo "触发 build-on-selfhosted.yml"
          branch=${{ vars.BRANCH }}
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ vars.REPO }}/actions/workflows/${{ vars.WORKFLOW }}/dispatches \
            -d '{"ref":"'$branch'"}'

      - name: 输出信息
        run: |
          echo "✔️ 已经在远程实例上注册 Runner 并触发第二阶段工作流。"